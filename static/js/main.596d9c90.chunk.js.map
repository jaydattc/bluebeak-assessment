{"version":3,"sources":["Table/index.js","utils/formatNumbers.js","components/BoxDisplay.js","components/StateSenateTable/index.js","components/Progress.js","components/TwitterFollowersTable/index.js","components/CircularDisplay.js","components/WWCTable/index.js","utils/fetchAndProcessData.js","App.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","onRowHover","onRowMouseLeave","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","style","headerStyle","position","cursor","role","render","isSorted","isSortedDesc","row","i","getRowProps","onMouseOver","original","undefined","onMouseLeave","cells","cell","getCellProps","className","formatToTwoDigit","n","parseFloat","toLocaleString","minimumIntegerDigits","maximumFractionDigits","useGrouping","formatToOneSF","toFixed","formatFractionToPercent","percentage","BoxDisplay","styled","span","props","bg","defaultProps","StateSenateTable","totalVotes","setCurrentHoverRow","React","useMemo","id","Header","accessor","maxWidth","Cell","value","entry","percentageFromTotal","total_votes","senate_state","Container","div","ProgressBar","progress","Progress","children","display","flexDirection","fontFamily","TwitterFollowersTable","maxFollowerSize","reduce","acc","parseInt","followers","href","target","rel","slice","twitter_followers","CircularDisplay","WWCTable","knockoutStageProps","wwc_forecasts","parseCsvResponse","response","a","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","results","Papa","parse","header","sanitizePossibleNumbers","obj","newObj","key","currentProcessedValue","isNaN","datasetLinks","wwc_forecasts_link","process","twitter_followers_link","senate_state_link","h1","SparkLinesList","Inline","color","Text","p","App","useState","setData","currentHoverRow","_setCurrentHoverRow","useCallback","useEffect","Promise","all","Object","values","link","fetch","then","parsedArrays","arr","processedData","catch","console","log","chancesOfWinningWorldCupList","x","win_league","twitterFollowers","votesPercentage","randomChanged","Array","fill","Math","random","team","account","state","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.596d9c90.chunk.js","sourcesContent":["import React from \"react\";\nimport { useResizeColumns, useSortBy, useTable } from \"react-table\";\nimport \"./index.css\";\n\nconst Table = ({ columns, data, onRowHover, onRowMouseLeave }) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy,\n  );\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th\n                  {...column.getHeaderProps({\n                    ...column.getSortByToggleProps(),\n                  })}\n                  style={\n                    column.headerStyle\n                      ? {\n                          position: \"relative\",\n                          cursor: \"pointer\",\n                          ...column.headerStyle,\n                        }\n                      : { position: \"relative\", cursor: \"pointer\" }\n                  }\n                  role=\"button\"\n                >\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted ? (column.isSortedDesc ? \"↓\" : \"↑\") : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                {...row.getRowProps()}\n                onMouseOver={\n                  onRowHover ? () => onRowHover(row.original) : undefined\n                }\n                onMouseLeave={\n                  onRowMouseLeave\n                    ? () => onRowMouseLeave(row.original)\n                    : undefined\n                }\n              >\n                {row.cells.map((cell) => {\n                  return (\n                    <td\n                      {...cell.getCellProps({\n                        className: cell.column.className,\n                        style: cell.column.style,\n                      })}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\nexport default Table;\n","export const formatToTwoDigit = (n) =>\n  parseFloat(n).toLocaleString(\"en-US\", {\n    minimumIntegerDigits: 2,\n    maximumFractionDigits: 0,\n    useGrouping: false,\n  });\nexport const formatToOneSF = (n) => parseFloat(n).toFixed(1) / 8; // get maximum value instead for better contrast\nexport const formatFractionToPercent = (n) => {\n  const percentage = parseFloat(parseFloat(n) * 100);\n  if (percentage >= 100) return \"✓\";\n  if (percentage > 99) return \"> 99 %\";\n  if (percentage < 99)\n    return (\n      percentage.toLocaleString(\"en-US\", {\n        maximumFractionDigits: 1,\n        useGrouping: false,\n      }) + \"%\"\n    );\n};\n","import styled from \"styled-components\";\nconst BoxDisplay = styled.span`\n  background: ${(props) => props.bg};\n  height: 100%;\n  display: flex;\n  flex-direction: row-reverse;\n  align-items: center;\n  padding: 0 0.5rem;\n`;\nBoxDisplay.defaultProps = { bg: \"rgb(80, 176, 172)\" };\nexport default BoxDisplay;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Table from \"../../Table\";\nimport { formatFractionToPercent } from \"../../utils/formatNumbers\";\nimport BoxDisplay from \"../BoxDisplay\";\n\nconst StateSenateTable = ({ data, totalVotes, setCurrentHoverRow }) => {\n  const columns = React.useMemo(\n    () => [\n      {\n        id: \"senate-state-followers\",\n        Header: \"\",\n        columns: [\n          {\n            Header: \"STATE\",\n            accessor: \"state\",\n          },\n          {\n            Header: \"VOTES\",\n            accessor: \"total_votes\",\n          },\n          {\n            Header: \"PERCENTAGE\",\n            accessor: \"percentageFromTotal\",\n            headerStyle: { maxWidth: \"6em\" },\n            Cell: ({ value }) => (\n              <BoxDisplay bg={`rgba(80, 176, 172, ${value})`}>\n                {formatFractionToPercent(value)}\n              </BoxDisplay>\n            ),\n          },\n        ],\n      },\n    ],\n    [],\n  );\n\n  return (\n    <Table\n      data={data.map((entry) => ({\n        ...entry,\n        percentageFromTotal: parseFloat(entry.total_votes) / totalVotes,\n      }))}\n      columns={columns}\n      onRowHover={(data) => setCurrentHoverRow({ senate_state: data })}\n    />\n  );\n};\n\nStateSenateTable.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      state: PropTypes.string,\n      total_votes: PropTypes.number,\n    }),\n  ),\n};\nexport default StateSenateTable;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  background-color: whitesmoke;\n  min-width: 6rem;\n  min-height: 1rem;\n  margin-left: 0.25rem;\n`;\nconst ProgressBar = styled.span`\n  display: block;\n  background-color: ${(props) => props.bg};\n  width: ${(props) => props.progress}%;\n  min-height: 1rem;\n`;\nProgressBar.defaultProps = {\n  bg: \"rgba(88, 194, 204)\",\n  progress: 0,\n};\nconst Progress = ({ progress, bg }) => (\n  <Container>\n    <ProgressBar progress={progress} bg={bg} />\n  </Container>\n);\n\nexport default Progress;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Table from \"../../Table\";\nimport Progress from \"../Progress\";\nimport { formatFractionToPercent } from \"../../utils/formatNumbers\";\nconst Container = ({ children }) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"row-reverse\",\n      fontFamily: '\"Fira Mono\", Consolas, Monaco, monospace',\n    }}\n  >\n    {children}\n  </div>\n);\n\nconst TwitterFollowersTable = ({ data, setCurrentHoverRow }) => {\n  const maxFollowerSize = React.useMemo(\n    () =>\n      data.reduce(\n        (acc, entry) =>\n          parseInt(entry.followers) > acc ? parseInt(entry.followers) : acc,\n        0,\n      ),\n    [data],\n  );\n  const columns = React.useMemo(\n    () => [\n      {\n        id: \"twitter-followers-senate\",\n        Header: \"\",\n        columns: [\n          {\n            Header: \"ACCOUNT\",\n            accessor: \"account\",\n            Cell: ({ value }) => (\n              <a\n                href={`https://twitter.com/${value}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                @{value}\n              </a>\n            ),\n          },\n          {\n            Header: \"FOLLOWERS\",\n            accessor: \"followers\",\n            Cell: ({ value }) => (\n              <Container>\n                <Progress\n                  progress={(parseInt(value) / maxFollowerSize) * 100}\n                />\n                {parseInt(value).toLocaleString(\"en-US\", {\n                  useGrouping: true,\n                })}\n              </Container>\n            ),\n          },\n          {\n            Header: \"EXCLUSIVE FOLLOWERS\",\n            accessor: \"exclusive_followers_pct\",\n            headerStyle: { maxWidth: \"6em\" },\n            Cell: ({ value }) => (\n              <Container>\n                <Progress\n                  bg=\"#f55e84\"\n                  progress={formatFractionToPercent(value).slice(0, -1)}\n                />{\" \"}\n                {formatFractionToPercent(value)}\n              </Container>\n            ),\n          },\n        ],\n      },\n    ],\n    [maxFollowerSize],\n  );\n\n  return (\n    <Table\n      data={data}\n      columns={columns}\n      onRowHover={(data) => setCurrentHoverRow({ twitter_followers: data })}\n    />\n  );\n};\n\nTwitterFollowersTable.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      account: PropTypes.string,\n      followers: PropTypes.number,\n      exclusive_followers_pct: PropTypes.number,\n    }),\n  ),\n};\nexport default TwitterFollowersTable;\n","import styled from \"styled-components\";\n\nconst CircularDisplay = styled.span`\n  background: ${(props) => props.bg};\n  display: inline-block;\n  border-radius: 1em;\n  line-height: 2em;\n  text-align: center;\n  width: 2em;\n`;\nCircularDisplay.defaultProps = { bg: \"green\" };\nexport default CircularDisplay;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Table from \"../../Table\";\nimport CircularDisplay from \"../CircularDisplay\";\nimport BoxDisplay from \"../BoxDisplay\";\nimport {\n  formatFractionToPercent,\n  formatToTwoDigit,\n  formatToOneSF,\n} from \"../../utils/formatNumbers\";\n\nconst WWCTable = ({ data, setCurrentHoverRow }) => {\n  const knockoutStageProps = React.useMemo(\n    () => ({\n      className: \"no-spacing\",\n      headerStyle: { maxWidth: \"5em\" },\n      Cell: ({ value }) => (\n        <BoxDisplay\n          bg={`rgba(80, 176, 172, ${parseFloat(value) < 0.5 ? 0 : value})`}\n        >\n          {formatFractionToPercent(value)}\n        </BoxDisplay>\n      ),\n    }),\n    [],\n  );\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"TEAM\",\n        accessor: \"team\",\n      },\n      {\n        Header: \"GROUP\",\n        accessor: \"group\",\n      },\n      {\n        Header: \"TEAM RATING\",\n        columns: [\n          {\n            Header: \"SPI\",\n            accessor: \"spi\",\n            Cell: (row) => parseFloat(row.value).toFixed(1),\n          },\n          {\n            Header: \"OFF.\",\n            accessor: \"global_o\",\n            Cell: (row) => (\n              <CircularDisplay\n                bg={`rgba(0, 255, 0, ${formatToOneSF(row.value)})`}\n              >\n                {formatToTwoDigit(row.value)}\n              </CircularDisplay>\n            ),\n          },\n          {\n            Header: \"DIFF.\",\n            accessor: \"global_d\",\n            Cell: (row) => (\n              <CircularDisplay\n                bg={`rgba(255, 0, 0, ${formatToOneSF(row.value)})`}\n              >\n                {formatToTwoDigit(row.value)}\n              </CircularDisplay>\n            ),\n          },\n        ],\n      },\n      {\n        Header: \"KNOCKOUT STAGE CHANCES\",\n        columns: [\n          {\n            Header: \"MAKE ROUND OF 16\",\n            accessor: \"make_round_of_16\",\n            ...knockoutStageProps,\n          },\n          {\n            Header: \"MAKE QTR-FINALS\",\n            accessor: \"make_quarters\",\n            ...knockoutStageProps,\n          },\n          {\n            Header: \"MAKE SEMIFINALIST\",\n            accessor: \"make_semis\",\n            ...knockoutStageProps,\n          },\n          {\n            Header: \"WIN WORLD CUP\",\n            accessor: \"win_league\",\n            ...knockoutStageProps,\n          },\n        ],\n      },\n    ],\n    [knockoutStageProps],\n  );\n\n  return (\n    <Table\n      data={data}\n      columns={columns}\n      onRowHover={(data) => setCurrentHoverRow({ wwc_forecasts: data })}\n    />\n  );\n};\n\nWWCTable.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      team: PropTypes.string,\n      group: PropTypes.string,\n      spi: PropTypes.number,\n      global_o: PropTypes.number,\n      global_d: PropTypes.number,\n      make_round_of_16: PropTypes.number,\n      make_quarters: PropTypes.number,\n      make_semis: PropTypes.number,\n      win_league: PropTypes.number,\n    }),\n  ),\n};\nexport default WWCTable;\n","import Papa from \"papaparse\";\n\nexport const parseCsvResponse = async (response) => {\n  const reader = response.body.getReader();\n  const result = await reader.read();\n  const decoder = new TextDecoder(\"utf-8\");\n  const csv = decoder.decode(result.value); // the csv text\n  const results = Papa.parse(csv, { header: true }); // object with { data, errors, meta }\n  return results.data;\n};\nconst sanitizePossibleNumbers = (obj) => {\n  const newObj = {};\n  for (const key in obj) {\n    const currentProcessedValue = parseFloat(obj[key]);\n    newObj[key] = isNaN(currentProcessedValue)\n      ? obj[key]\n      : currentProcessedValue;\n  }\n  return newObj;\n};\n\nexport const datasetLinks = {\n  wwc_forecasts_link: process.env.PUBLIC_URL + \"/dataset/wwc_forecasts.csv\",\n  twitter_followers_link:\n    process.env.PUBLIC_URL + \"/dataset/twitter_followers.csv\",\n  senate_state_link: process.env.PUBLIC_URL + \"/dataset/senate_state.csv\",\n};\n\nexport const fetchAndProcessData = () =>\n  Promise.all(\n    Object.values(datasetLinks).map((link) => fetch(link)),\n  ).then((values) =>\n    Promise.all(values.map(parseCsvResponse)).then((parsedArrays) =>\n      parsedArrays.map((arr) => arr.map(sanitizePossibleNumbers)),\n    ),\n  );\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport StateSenateTable from \"./components/StateSenateTable\";\nimport TwitterFollowersTable from \"./components/TwitterFollowersTable\";\nimport WWCTable from \"./components/WWCTable\";\nimport { fetchAndProcessData } from \"./utils/fetchAndProcessData.js\";\nimport { Sparklines, SparklinesBars, SparklinesLine } from \"react-sparklines\";\nimport { formatFractionToPercent } from \"./utils/formatNumbers\";\n\nconst Header = styled.h1`\n  margin-top: calc(56px + 3em - 8px);\n  width: 100%;\n  font-size: 24px;\n  text-align: center;\n  border-bottom: 1px solid black;\n`;\nconst SparkLinesList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 10px;\n  align-items: flex-end;\n  max-width: 300px;\n`;\nconst Inline = styled.span`\n  display: inline;\n  font-weight: bold;\n  color: ${(props) => props.color};\n`;\nInline.defaultProps = {\n  color: \"black\",\n};\nconst Text = styled.p`\n  padding: 0;\n  margin: 0;\n  min-height: 4rem;\n  margin-top: 2rem;\n  vertical-align: text-bottom;\n`;\n\nfunction App() {\n  const [data, setData] = useState({\n    wwc_forecasts: [],\n    twitter_followers: [],\n    senate_state: [],\n  });\n  const [currentHoverRow, _setCurrentHoverRow] = useState({\n    wwc_forecasts: null,\n    twitter_followers: null,\n    senate_state: null,\n  });\n  const setCurrentHoverRow = useCallback(\n    (data) => _setCurrentHoverRow({ ...currentHoverRow, ...data }),\n    [_setCurrentHoverRow, currentHoverRow],\n  );\n  useEffect(() => {\n    fetchAndProcessData()\n      .then((processedData) => {\n        setData({\n          wwc_forecasts: processedData[0],\n          twitter_followers: processedData[1],\n          senate_state: processedData[2],\n        });\n        _setCurrentHoverRow({\n          wwc_forecasts: processedData[0][0],\n          twitter_followers: processedData[1][0],\n          senate_state: processedData[2][0],\n        });\n      })\n      .catch(console.log); //error while fetching or processing data\n  }, [_setCurrentHoverRow]);\n\n  const chancesOfWinningWorldCupList = useMemo(\n    () => data.wwc_forecasts.map((x) => parseFloat(x.win_league)),\n    [data],\n  );\n  const twitterFollowers = useMemo(\n    () => data.twitter_followers.map((x) => parseFloat(x.followers)),\n    [data],\n  );\n  const votesPercentage = useMemo(\n    () => data.senate_state.map((x) => parseFloat(x.total_votes)),\n    [data],\n  );\n  const totalVotes = useMemo(\n    () =>\n      data.senate_state.reduce(\n        (acc, entry) => parseInt(entry.total_votes) + acc,\n        0,\n      ),\n    [data],\n  );\n  const randomChanged = useMemo(\n    () =>\n      Array(20)\n        .fill(null)\n        .map(() => Math.random()),\n    [],\n  );\n\n  return (\n    <div className=\"App\">\n      <WWCTable\n        setCurrentHoverRow={setCurrentHoverRow}\n        data={data.wwc_forecasts}\n      />\n      <TwitterFollowersTable\n        setCurrentHoverRow={setCurrentHoverRow}\n        data={data.twitter_followers}\n      />\n      <StateSenateTable\n        setCurrentHoverRow={setCurrentHoverRow}\n        totalVotes={totalVotes}\n        data={data.senate_state}\n      />\n      <div style={{ maxWidth: \"300px\" }}>\n        <Header>What it means</Header>{\" \"}\n        <SparkLinesList>\n          <Sparklines data={chancesOfWinningWorldCupList}>\n            <SparklinesBars />\n          </Sparklines>\n          <Text>\n            <Inline>{currentHoverRow.wwc_forecasts?.team}</Inline> has a{\" \"}\n            <Inline color=\"red\">\n              {formatFractionToPercent(\n                currentHoverRow.wwc_forecasts?.win_league,\n              )}\n            </Inline>{\" \"}\n            chance of winning the World Cup.\n          </Text>\n          <Sparklines data={twitterFollowers}>\n            <SparklinesBars />\n          </Sparklines>\n          <Text>\n            <Inline>{currentHoverRow.twitter_followers?.account}</Inline> has{\" \"}\n            <Inline color=\"red\">\n              {parseInt(\n                currentHoverRow.twitter_followers?.followers,\n              ).toLocaleString(\"en-US\", {\n                useGrouping: true,\n              })}\n            </Inline>{\" \"}\n            followers on twitter.\n          </Text>\n          <Sparklines data={votesPercentage}>\n            <SparklinesBars />\n          </Sparklines>\n          <Text>\n            <Inline>{currentHoverRow.senate_state?.state}</Inline> received{\" \"}\n            <Inline color=\"red\">\n              {formatFractionToPercent(\n                parseInt(currentHoverRow.senate_state?.total_votes) /\n                  totalVotes,\n              )}\n            </Inline>{\" \"}\n            of total votes.\n          </Text>\n        </SparkLinesList>\n        <Header>How it's changed</Header>\n        <Sparklines data={randomChanged}>\n          <SparklinesLine style={{ fill: \"none\" }} />\n        </Sparklines>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}